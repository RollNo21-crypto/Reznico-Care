import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { 
  FileText, 
  Upload, 
  Download, 
  Search, 
  Filter,
  Calendar,
  Tag,
  Archive,
  Eye,
  Trash2,
  FolderOpen,
  Clock,
  CheckCircle,
  AlertTriangle,
  Star,
  Share2,
  RefreshCw,
  Database,
  Zap,
  Shield,
  MoreVertical,
  Loader2,
  BarChart3
} from 'lucide-react'

// Mock document data with automatic categorization
const MOCK_DOCUMENTS = [
  {
    id: 'doc-001',
    name: 'Service Invoice - Oil Change',
    type: 'invoice',
    category: 'Service Records',
    uploadDate: '2024-01-15',
    serviceDate: '2024-01-15',
    size: '245 KB',
    tags: ['oil-change', 'maintenance', 'routine'],
    status: 'processed',
    confidence: 98,
    extractedData: {
      amount: 8500,
      serviceType: 'Oil Change',
      mileage: 45000,
      nextService: '2024-04-15'
    },
    autoGenerated: false
  },
  {
    id: 'doc-002',
    name: 'Insurance Policy Document',
    type: 'insurance',
    category: 'Insurance',
    uploadDate: '2024-01-10',
    expiryDate: '2024-12-31',
    size: '1.2 MB',
    tags: ['comprehensive', 'policy', 'renewal'],
    status: 'processed',
    confidence: 95,
    extractedData: {
      policyNumber: 'POL-2024-001',
      coverage: 'Comprehensive',
      premium: 25000
    },
    autoGenerated: false
  },
  {
    id: 'doc-003',
    name: 'PUC Certificate',
    type: 'certificate',
    category: 'Compliance',
    uploadDate: '2024-01-08',
    expiryDate: '2024-07-08',
    size: '180 KB',
    tags: ['puc', 'emission', 'compliance'],
    status: 'processed',
    confidence: 99,
    extractedData: {
      certificateNumber: 'PUC-2024-001',
      emissionLevel: 'BS6',
      validUntil: '2024-07-08'
    },
    autoGenerated: false
  },
  {
    id: 'doc-004',
    name: 'Brake Service Report',
    type: 'service-report',
    category: 'Service Records',
    uploadDate: '2023-08-20',
    serviceDate: '2023-08-20',
    size: '890 KB',
    tags: ['brake-service', 'safety', 'repair'],
    status: 'processed',
    confidence: 97,
    extractedData: {
      amount: 12000,
      serviceType: 'Brake Service',
      mileage: 42000,
      partsReplaced: ['Brake Pads', 'Brake Fluid']
    },
    autoGenerated: false
  },
  {
    id: 'doc-005',
    name: 'Compiled Service History - 2024',
    type: 'compiled-report',
    category: 'Auto-Generated',
    uploadDate: '2024-01-16',
    size: '2.1 MB',
    tags: ['auto-generated', 'service-history', 'annual'],
    status: 'generated',
    confidence: 100,
    extractedData: {
      totalServices: 8,
      totalCost: 45000,
      period: '2024',
      nextRecommendedService: '2024-04-15'
    },
    autoGenerated: true
  }
]

// Document categories for filtering
const DOCUMENT_CATEGORIES = [
  { id: 'all', name: 'All Documents', icon: FolderOpen, count: MOCK_DOCUMENTS.length },
  { id: 'service-records', name: 'Service Records', icon: FileText, count: 2 },
  { id: 'insurance', name: 'Insurance', icon: Shield, count: 1 },
  { id: 'compliance', name: 'Compliance', icon: CheckCircle, count: 1 },
  { id: 'auto-generated', name: 'Auto-Generated', icon: Zap, count: 1 }
]

function DocumentManagement() {
  const [documents, setDocuments] = useState(MOCK_DOCUMENTS)
  const [selectedCategory, setSelectedCategory] = useState('All')
  const [searchTerm, setSearchTerm] = useState('')
  const [isProcessing, setIsProcessing] = useState(false)
  const [selectedDocument, setSelectedDocument] = useState(null)
  const [showUploadDialog, setShowUploadDialog] = useState(false)
  const [showReportDialog, setShowReportDialog] = useState(false)
  const [processingDocuments, setProcessingDocuments] = useState([])

  const categories = ['All', 'Service Records', 'Insurance', 'Compliance', 'Auto-Generated']

  // Filter documents based on category and search
  const filteredDocuments = documents.filter(doc => {
    const matchesCategory = selectedCategory === 'All' || 
      doc.category === selectedCategory
    const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      doc.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    return matchesCategory && matchesSearch
  })

  // Handler functions
  const handleView = (doc) => {
    setSelectedDocument(doc)
  }

  const handleDownload = (doc) => {
    console.log('Downloading:', doc.name)
  }

  const handleShare = (doc) => {
    console.log('Sharing:', doc.name)
  }

  const handleDelete = (doc) => {
    setDocuments(prev => prev.filter(d => d.id !== doc.id))
  }

  // Simulate document processing
  const processDocument = async (file) => {
    setIsProcessing(true)
    
    // Simulate AI processing delay
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // Mock document analysis results
    const newDoc = {
      id: `doc-${Date.now()}`,
      name: file.name,
      type: 'unknown',
      category: 'Pending Classification',
      uploadDate: new Date().toISOString().split('T')[0],
      size: `${(file.size / 1024).toFixed(0)} KB`,
      tags: ['new', 'unprocessed'],
      status: 'processing',
      confidence: 0,
      extractedData: {},
      autoGenerated: false
    }
    
    setDocuments(prev => [newDoc, ...prev])
    setIsProcessing(false)
    
    // Simulate classification after processing
    setTimeout(() => {
      setDocuments(prev => prev.map(doc => 
        doc.id === newDoc.id 
          ? { ...doc, status: 'processed', confidence: 92, category: 'Service Records' }
          : doc
      ))
    }, 1000)
  }

  // Generate service history compilation
  const generateServiceHistory = async () => {
    setIsProcessing(true)
    
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    const compiledReport = {
      id: `compiled-${Date.now()}`,
      name: `Service History Compilation - ${new Date().getFullYear()}`,
      type: 'compiled-report',
      category: 'Auto-Generated',
      uploadDate: new Date().toISOString().split('T')[0],
      size: '1.8 MB',
      tags: ['auto-generated', 'service-history', 'compilation'],
      status: 'generated',
      confidence: 100,
      extractedData: {
        totalServices: filteredDocuments.filter(d => d.category === 'Service Records').length,
        totalCost: 35000,
        period: new Date().getFullYear(),
        lastService: '2024-01-15'
      },
      autoGenerated: true
    }
    
    setDocuments(prev => [compiledReport, ...prev])
    setIsProcessing(false)
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'processed': return 'bg-green-100 text-green-800'
      case 'processing': return 'bg-yellow-100 text-yellow-800'
      case 'generated': return 'bg-blue-100 text-blue-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getTypeIcon = (type) => {
    const iconProps = "h-4 w-4 sm:h-5 sm:w-5 text-gray-600 flex-shrink-0"
    switch (type) {
      case 'invoice': return <FileText className={iconProps} />
      case 'insurance': return <Shield className={iconProps} />
      case 'certificate': return <CheckCircle className={iconProps} />
      case 'service-report': return <FileText className={iconProps} />
      case 'compiled-report': return <Database className={iconProps} />
      default: return <FileText className={iconProps} />
    }
  }

  return (
    <div className="w-full max-w-7xl mx-auto px-2 sm:px-4">
      {/* Header */}
      <Card className="mb-4 sm:mb-6">
        <CardHeader className="pb-3 sm:pb-6">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-4">
            <div>
              <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
                <FileText className="h-5 w-5 sm:h-6 sm:w-6" />
                Document Management
              </CardTitle>
              <p className="text-xs sm:text-sm text-muted-foreground mt-1">
                Manage and organize your vehicle documents with AI-powered processing
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto">
              <Button 
                onClick={() => setShowReportDialog(true)}
                className="bg-blue-600 hover:bg-blue-700 text-xs sm:text-sm h-8 sm:h-9"
              >
                <BarChart3 className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                Generate Report
              </Button>
              <Button 
                onClick={() => setShowUploadDialog(true)}
                className="text-xs sm:text-sm h-8 sm:h-9"
              >
                <Upload className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                Upload Document
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Search and Filters */}
      <Card className="mb-4 sm:mb-6">
        <CardContent className="p-3 sm:p-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div className="relative w-full sm:w-auto sm:min-w-[300px]">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="Search documents..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 h-8 sm:h-9 text-sm"
              />
            </div>
            <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
              <div className="flex flex-wrap gap-1 sm:gap-2">
                {categories.map((category) => (
                  <Button
                    key={category}
                    variant={selectedCategory === category ? "default" : "outline"}
                    size="sm"
                    onClick={() => setSelectedCategory(category)}
                    className="text-xs h-7 sm:h-8 px-2 sm:px-3"
                  >
                    {category}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Processing Status */}
      {processingDocuments.length > 0 && (
        <Card className="mb-4 sm:mb-6 border-blue-200 bg-blue-50/50">
          <CardHeader className="pb-2 sm:pb-4">
            <CardTitle className="flex items-center gap-2 text-blue-700 text-base sm:text-lg">
              <Loader2 className="h-4 w-4 sm:h-5 sm:w-5 animate-spin" />
              Processing Documents ({processingDocuments.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-2 sm:space-y-3">
            {processingDocuments.map((doc) => (
              <div key={doc.id} className="flex items-center justify-between p-2 sm:p-3 bg-white rounded-lg border border-blue-200">
                <div className="flex items-center gap-2 sm:gap-3 flex-1 min-w-0">
                  <FileText className="h-4 w-4 sm:h-5 sm:w-5 text-blue-600 flex-shrink-0" />
                  <div className="min-w-0 flex-1">
                    <p className="font-medium text-blue-900 text-sm sm:text-base truncate">{doc.name}</p>
                    <p className="text-xs sm:text-sm text-blue-700">Processing... {doc.progress}%</p>
                  </div>
                </div>
                <div className="w-16 sm:w-20 bg-blue-200 rounded-full h-1.5 sm:h-2 flex-shrink-0">
                  <div 
                    className="bg-blue-600 h-1.5 sm:h-2 rounded-full transition-all duration-300" 
                    style={{ width: `${doc.progress}%` }}
                  />
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      )}

      {/* Documents Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4">
        {filteredDocuments.map((doc) => (
          <Card key={doc.id} className="hover:shadow-md transition-shadow border border-gray-200">
            <CardContent className="p-3 sm:p-4">
              <div className="flex items-start justify-between gap-2 mb-3">
                <div className="flex items-center gap-2 flex-1 min-w-0">
                  {getTypeIcon(doc.type)}
                  <div className="min-w-0 flex-1">
                    <h3 className="font-medium text-sm sm:text-base truncate">{doc.name}</h3>
                    <p className="text-xs text-muted-foreground">{doc.size}</p>
                  </div>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm" className="h-6 w-6 sm:h-8 sm:w-8 p-0">
                      <MoreVertical className="h-3 w-3 sm:h-4 sm:w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-40">
                    <DropdownMenuItem onClick={() => handleView(doc)}>
                      <Eye className="h-3 w-3 mr-2" />
                      View
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => handleDownload(doc)}>
                      <Download className="h-3 w-3 mr-2" />
                      Download
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => handleShare(doc)}>
                      <Share2 className="h-3 w-3 mr-2" />
                      Share
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onClick={() => handleDelete(doc)}
                      className="text-red-600 focus:text-red-600"
                    >
                      <Trash2 className="h-3 w-3 mr-2" />
                      Delete
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between text-xs sm:text-sm">
                  <span className="text-muted-foreground">Status:</span>
                  <Badge className={`${getStatusColor(doc.status)} text-xs px-1.5 py-0.5`}>
                    {doc.status}
                  </Badge>
                </div>
                
                {doc.aiProcessing && (
                  <div className="flex items-center justify-between text-xs sm:text-sm">
                    <span className="text-muted-foreground">AI Confidence:</span>
                    <div className="flex items-center gap-1">
                      <div className="w-12 sm:w-16 bg-gray-200 rounded-full h-1.5">
                        <div 
                          className={`h-1.5 rounded-full ${
                            doc.aiProcessing.confidence > 80 ? 'bg-green-500' :
                            doc.aiProcessing.confidence > 60 ? 'bg-yellow-500' : 'bg-red-500'
                          }`}
                          style={{ width: `${doc.aiProcessing.confidence}%` }}
                        />
                      </div>
                      <span className="text-xs font-medium">{doc.aiProcessing.confidence}%</span>
                    </div>
                  </div>
                )}

                <div className="flex items-center justify-between text-xs sm:text-sm">
                  <span className="text-muted-foreground">Category:</span>
                  <Badge variant="outline" className="text-xs px-1.5 py-0.5">
                    {doc.category}
                  </Badge>
                </div>

                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <span>Uploaded:</span>
                  <span>{new Date(doc.uploadDate).toLocaleDateString()}</span>
                </div>
              </div>

              <div className="flex gap-1 sm:gap-2 mt-3 pt-3 border-t border-gray-100">
                <Button 
                  size="sm" 
                  variant="outline" 
                  onClick={() => handleView(doc)}
                  className="flex-1 text-xs h-7 sm:h-8"
                >
                  <Eye className="h-3 w-3 mr-1" />
                  View
                </Button>
                <Button 
                  size="sm" 
                  variant="outline" 
                  onClick={() => handleDownload(doc)}
                  className="flex-1 text-xs h-7 sm:h-8"
                >
                  <Download className="h-3 w-3 mr-1" />
                  Download
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredDocuments.length === 0 && (
        <Card className="mt-6">
          <CardContent className="p-8 sm:p-12 text-center">
            <FileText className="h-12 w-12 sm:h-16 sm:w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg sm:text-xl font-semibold text-gray-900 mb-2">No documents found</h3>
            <p className="text-sm sm:text-base text-gray-600 mb-4">
              {searchTerm || selectedCategory !== 'All' 
                ? 'Try adjusting your search or filter criteria'
                : 'Upload your first document to get started'
              }
            </p>
            <Button onClick={() => setShowUploadDialog(true)} className="text-sm">
              <Upload className="h-4 w-4 mr-2" />
              Upload Document
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Upload Modal */}
      {showUploadDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Upload Document</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600 mb-2">
                    Drag and drop files here, or click to browse
                  </p>
                  <Input
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                    onChange={(e) => {
                      if (e.target.files?.[0]) {
                        processDocument(e.target.files[0])
                        setShowUploadDialog(false)
                      }
                    }}
                    className="hidden"
                    id="file-upload"
                  />
                  <Label htmlFor="file-upload" className="cursor-pointer">
                    <Button variant="outline" className="mt-2">
                      Choose Files
                    </Button>
                  </Label>
                </div>
                <p className="text-xs text-gray-500">
                  Supported formats: PDF, JPG, PNG, DOC, DOCX (Max 10MB)
                </p>
                <div className="flex gap-2">
                  <Button 
                    variant="outline" 
                    className="flex-1"
                    onClick={() => setShowUploadDialog(false)}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}

export default DocumentManagement